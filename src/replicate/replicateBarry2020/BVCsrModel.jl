# ðŸ”¥ A reproduction of the BVC-SR model of Cothi and Barry
using PyPlot
using LinearAlgebra
using BenchmarkTools
using ProgressBars
using Distributions
using ImageFiltering
using Roots

function angleDiff(e)
    if abs(e+2.0f0*Ï€) < abs(e-2.0f0*Ï€)
        return abs(e+2.0f0*Ï€) < abs(e) ? abs(e+2.0f0*Ï€)  : abs(e)
    else
        return abs(e-2.0f0*Ï€) < abs(e) ? abs(e-2.0f0*Ï€)  : abs(e)
    end
    return abs(e)
end

#boundary fields:
const Î² = 12f0 # UNIT NOT PROVIDED...
const Î¾ = 8f0 # UNIT NOT PROVIDED...
const Ïƒ_ang = 11.25f0*Ï€/180f0
Ïƒ_rad(di) = di/Î²+Î¾
g(di,Ï•i) = (r,Î¸) -> exp(-(r-di)^2/(2f0*Ïƒ_rad(di)^2))/(âˆš(2f0*Ï€*Ïƒ_rad(di)^2))*exp(-angleDiff(Î¸-Ï•i)^2/(2f0*Ïƒ_ang^2))/(sqrt(2f0*Ï€*Ïƒ_ang^2))
#note: there might be a unit problem in g for the rad -> deg

DI = Float32.([3.3,10.2,17.5,25.3,33.7,42.6,52.2,62.4,73.3,85.0])
Ï•I = Float32.([0,22.5,45,67.5,90,112.5,135,157.5,180,202.5,225,247.5,270,292.5,315,337.5])*Ï€/180f0

const envDim = (60,60)
const Î³ = 0.995f0
const Î±_M = 0.0001f0

TC = reduce(vcat,map(di->map(Ï•i->g(di,Ï•i),Ï•I),DI))

dÎ¸ = 0.05f0
Î¸_bin = -Ï€:dÎ¸:Ï€
dx = 1 # bins of 1 cm
OrientedMaps = Float32.(zeros(div(envDim[1],dx),div(envDim[2],dx),size(Î¸_bin,1)))
function boundary(x,y)
    x==0 ? 1f0 : y ==0 ? 1f0 : x == envDim[1] ? 1f0 : y==envDim[1] ? 1f0 : 0f0
end

#obtain a gaussian filtered boundary map:
Maps = reduce(hcat,map(x->map(y->boundary(x,y),0f0:dx:envDim[1]),0f0:dx:envDim[1]))
# GausMaps = imfilter(Maps, Kernel.gaussian(5))
GausMaps = Maps
# fig,ax = plt.subplots(1,2)
# ax[1].imshow(Maps)
# ax[2].imshow(GausMaps)
# display(fig)

#Next we obtain for each position, the distance to the closest boundary:
minGM = minimum(GausMaps)
maxGM = maximum(GausMaps)
inside(x,y) = x<1 ? false : x>size(GausMaps,1) ? false : y<1 ? false : y>size(GausMaps,2) ? false : true
function bf(Î¸,x,y)
    function bfr(r)
        posX = round(Int,r*cos(Î¸)+x)
        posY = round(Int,r*sin(Î¸)+y)
        return inside(posX,posY) ? GausMaps[posX,posY] : minGM
    end
end
function findDistance(Î¸,x,y)
    if boundary(x,y)==1f0 #wer remove points that are on the boundary
        return 0f0
    end
    rs = 0f0:dx:2*max(envDim...)
    val = bf(Î¸,x+1,y+1).(rs)
    #for the moment we only consider the case of one boundary
    # near a boundary we could still have a larger value than further away
    # So to test this we need to check that the derivaive is positive at the putative maximal points
    dval = sign.(diff(val))
    minr = rs[argmax(val[2:end].*dval)+1]
end

dÎ¸ = 0.5f0*Ï€/180
Î¸_bin = -Ï€:dÎ¸:Ï€
X = 0f0:dx:envDim[1]
Y = 0f0:dx:envDim[1]
@time DistancesMaps = map(Î¸->reduce(hcat,map(x->map(y->findDistance(Î¸,x,y),X),Y)),Î¸_bin)

fig = plt.figure(figsize=(10,10))
for i in 1:1:size(Î¸_bin,1)
    ax = fig.add_subplot(div(size(Î¸_bin,1),floor(Int,âˆš(size(Î¸_bin,1)))),28,i)
    ax.imshow(BVCfields[i])
    ax.set_axis_off()
end
display(fig)

#let us obtain the tunign curves:
@time TCs = map(tc->map(Î¸idx->reduce(hcat,map(x->map(y->tc(DistancesMaps[Î¸idx][x,y],Î¸_bin[Î¸idx]),1:1:size(DistancesMaps[Î¸idx],1)),1:1:size(DistancesMaps[Î¸idx],1))),1:1:size(Î¸_bin,1)),TC)

TCSumed = map(tc->sum(tc),TCs)
fig = plt.figure(figsize=(10,10))
for i in 1:1:size(TCSumed,1)
    ax = fig.add_subplot(10,16,i)
    ax.imshow(TCSumed[i])
    ax.set_axis_off()
end
display(fig)

const b = 13.02f0 #cm/sec
const Î¼ = -0.03f0*Ï€/180f0 #rad/sec
const Ïƒ = 330.12f0*Ï€/180f0 #rad/sec

dt = 1f0/50f0
T = 1:dt:60*60*2 #2 hours, 50 Hz sampling
samples = size(T,1)
RandomTurn = Float32.(rand(Normal(Î¼,Ïƒ),samples))
RandomVel = Float32.(rand(Rayleigh(Ïƒ),samples))
Position = zeros(samples,2)
Position[1,:] = [2f0,2f0]
Velocity = zeros(samples,2)

#function to obtain the minimal distance to any wall:
function minDist(x,y)
    dists = map(dm->dm[round(Int,x+1),round(Int,y+1)],DistancesMaps) # Would not work in a more complex environment....
    return minimum(dists),Î¸_bin[argmin(dists)]
end
currentAngle = [0f0]
v = [20f0]
function step!(Position,currentAngle,v,step)
    print(Position[step-1])
    dWall,aWall = minDist(Position[step-1,:]...)
    println("  ",dWall,"  ",angleDiff(aWall-currentAngle))
    newangle = 0
    if dWall<0.2 && angleDiff(aWall-currentAngle)<Ï€/2f0
        newangle =  sign(angleDiff(aWall-currentAngle))*(Ï€/2f0-angleDiff(aWall-currentAngle))
        v = v-0.5f0*(v-5f0)
    else
        v = RandomVel[step]
        newangle = RandomTurn[step]
    end
    Dir = Vector([cos(currentAngle),sin(currentAngle)])
    Position[step,:] .= Position[step-1] .+ (Dir.*v.*dt)
    currentAngle = mod(currentAngle+newangle+Ï€,2Ï€)-Ï€
    return currentAngle,v
end

for idx in ProgressBar(2:1:samples)
    step!(Position,currentAngle[1],v[1],idx)
end

fig,ax = plt.subplots()
# ax.hist(RandomTurn*dt)
ax.scatter(Position[:,1],Position[:,2])
display(fig)
